{"version":3,"sources":["styles.js","App.js","serviceWorker.js","index.js"],"names":["image","CircleStyle","radius","fill","stroke","Stroke","color","width","styles","Style","Fill","lineDash","styleFunction","feature","res","type","getGeometry","getType","App","props","state","mapRef","React","createRef","console","log","countryFeatures","vectorSource","VectorSource","features","GeoJSON","readFeatures","vectorLayer","VectorLayer","style","source","map","Map","target","this","current","layers","TileLayer","OSM","view","View","center","zoom","setState","ref","className","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iZAEaA,EAAQ,IAAIC,IAAY,CACjCC,OAAQ,EACRC,KAAM,KACNC,OAAQ,IAAIC,IAAO,CAAEC,MAAO,MAAOC,MAAO,MAGjCC,EAAS,CAClB,MAAS,IAAIC,IAAM,CACfT,MAAOA,IAEX,WAAc,IAAIS,IAAM,CACpBL,OAAQ,IAAIC,IAAO,CACfC,MAAO,QACPC,MAAO,MAGf,gBAAmB,IAAIE,IAAM,CACzBL,OAAQ,IAAIC,IAAO,CACfC,MAAO,QACPC,MAAO,MAGf,WAAc,IAAIE,IAAM,CACpBT,MAAOA,IAEX,aAAgB,IAAIS,IAAM,CACtBL,OAAQ,IAAIC,IAAO,CACfC,MAAO,SACPC,MAAO,IAEXJ,KAAM,IAAIO,IAAK,CACXJ,MAAO,6BAGf,QAAW,IAAIG,IAAM,CACjBL,OAAQ,IAAIC,IAAO,CACfC,MAAO,OACPK,SAAU,CAAC,GACXJ,MAAO,KAEXJ,KAAM,IAAIO,IAAK,CACXJ,MAAO,2BAGf,mBAAsB,IAAIG,IAAM,CAC5BL,OAAQ,IAAIC,IAAO,CACfC,MAAO,UACPC,MAAO,IAEXJ,KAAM,IAAIO,IAAK,CACXJ,MAAO,YAEXN,MAAO,IAAIC,IAAY,CACnBC,OAAQ,GACRC,KAAM,KACNC,OAAQ,IAAIC,IAAO,CACfC,MAAO,gBAInB,OAAU,IAAIG,IAAM,CAChBL,OAAQ,IAAIC,IAAO,CACfC,MAAO,MACPC,MAAO,IAEXJ,KAAM,IAAIO,IAAK,CACXJ,MAAO,yBAKNM,EAAgB,SAAUC,EAASC,GAC5C,IAAMC,EAAOF,EAAQG,cAAcC,UAGnC,OAFkBT,EAAOO,I,QCTdG,G,gEAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAEb,EAAKC,OAASC,IAAMC,YAJH,E,gEASjBC,QAAQC,IAAIC,GACZ,IAAMC,EAAe,IAAIC,IAAa,CACpCC,UAAU,IAAIC,KAAUC,aAAaL,KAGjCM,EAAc,IAAIC,IAAY,CAClCC,MAAOtB,EACPuB,OAAQR,IAIJS,EAAM,IAAIC,IAAI,CAClBC,OAAQC,KAAKlB,OAAOmB,QACpBC,OAAQ,CAEN,IAAIC,IAAU,CACZP,OAAQ,IAAIQ,MAEdX,GAEFY,KAAM,IAAIC,IAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAMVR,KAAKS,SAAS,CACZZ,IAAKA,EACLJ,kB,+BAKF,OACE,yBAAKiB,IAAKV,KAAKlB,OAAS6B,UAAU,MAAMhB,MAAO,CAACiB,OAAQ,QAAS5C,MAAO,SAAxE,S,GA9CYe,IAAM8B,YCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.b62a9fce.chunk.js","sourcesContent":["import { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style';\n\nexport const image = new CircleStyle({\n    radius: 5,\n    fill: null,\n    stroke: new Stroke({ color: 'red', width: 1 })\n})\n\nexport const styles = {\n    'Point': new Style({\n        image: image\n    }),\n    'LineString': new Style({\n        stroke: new Stroke({\n            color: 'green',\n            width: 1\n        })\n    }),\n    'MultiLineString': new Style({\n        stroke: new Stroke({\n            color: 'green',\n            width: 1\n        })\n    }),\n    'MultiPoint': new Style({\n        image: image\n    }),\n    'MultiPolygon': new Style({\n        stroke: new Stroke({\n            color: 'yellow',\n            width: 1\n        }),\n        fill: new Fill({\n            color: 'rgba(255, 255, 0, 0.5)'\n        })\n    }),\n    'Polygon': new Style({\n        stroke: new Stroke({\n            color: 'blue',\n            lineDash: [4],\n            width: 10\n        }),\n        fill: new Fill({\n            color: 'rgba(0, 0, 255, 0.5)'\n        })\n    }),\n    'GeometryCollection': new Style({\n        stroke: new Stroke({\n            color: 'magenta',\n            width: 2\n        }),\n        fill: new Fill({\n            color: 'magenta'\n        }),\n        image: new CircleStyle({\n            radius: 10,\n            fill: null,\n            stroke: new Stroke({\n                color: 'magenta'\n            })\n        })\n    }),\n    'Circle': new Style({\n        stroke: new Stroke({\n            color: 'red',\n            width: 2\n        }),\n        fill: new Fill({\n            color: 'rgba(255,0,0,0.2)'\n        })\n    })\n};\n\nexport const styleFunction = function (feature, res) {\n    const type = feature.getGeometry().getType()\n    const thisStyle = styles[type];\n    // thisStyle.setScale(1)\n    return thisStyle;\n};\n\n\nexport default {\n    image,\n    styles,\n    styleFunction\n}","import React from 'react';\n\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport { GeoJSON } from 'ol/format';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { OSM, Vector as VectorSource } from 'ol/source';\n\nimport { styleFunction } from './styles'\nimport countryFeatures from './data/generated.geo.json'\n\nimport './App.css';\nimport 'ol/ol.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    // refs \n    this.mapRef = React.createRef()\n  }\n  componentDidMount() {\n    // const { countryFeatures } = this.props\n    // create feature layer and vector source\n    console.log(countryFeatures)\n    const vectorSource = new VectorSource({\n      features: new GeoJSON().readFeatures(countryFeatures),\n    })\n\n    const vectorLayer = new VectorLayer({\n      style: styleFunction,\n      source: vectorSource,\n    });\n\n    // create map object with feature layer\n    const map = new Map({\n      target: this.mapRef.current,\n      layers: [\n        //default OSM layer\n        new TileLayer({\n          source: new OSM()\n        }),\n        vectorLayer\n      ],\n      view: new View({\n        center: [0, 0],\n        zoom: 2\n      })\n    });\n\n\n    // save map and layer references to local state\n    this.setState({\n      map: map,\n      vectorLayer\n    });\n  }\n\n  render () {\n    return (\n      <div ref={this.mapRef}  className=\"map\" style={{height: '500px', width: '100%'}}> </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}